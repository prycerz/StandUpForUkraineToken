pragma solidity ^0.5.0;

contract ERC20Interface {
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract GasToken is ERC20Interface {
    address public specialWallet;

    constructor(address _specialWallet) public {
        specialWallet = _specialWallet;
    }

    // ...

    // Added transfer function with split between a special wallet and a buyer.
    function transferWithSplit(address to, uint tokens) public returns (bool success) {
        require(tokens <= balances[msg.sender], "Insufficient balance");
        require(to != address(0), "Invalid recipient address");

        uint specialWalletAmount = (tokens * 10) / 100; // 10% kwoty
        uint recipientAmount = tokens - specialWalletAmount;

        // Transfers appropriately modified.
        balances[msg.sender] -= tokens;
        balances[to] += recipientAmount;
        balances[specialWallet] += specialWalletAmount;

        emit Transfer(msg.sender, to, recipientAmount);
        emit Transfer(msg.sender, specialWallet, specialWalletAmount);

        return true;
    }
}
